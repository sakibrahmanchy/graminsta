{"ast":null,"code":"import _slicedToArray from\"/Users/sakibur/projects/Personal Projects/test/graminsta/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Users/sakibur/projects/Personal Projects/test/graminsta/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\nmutation CreatePost($content: String) {\\n  createPost(content: $content) {\\n    content,\\n    date\\n  }\\n}\"]);_templateObject=function _templateObject(){return data;};return data;}import{gql}from'apollo-boost';import React,{useRef,useState}from'react';import{useMutation}from'@apollo/react-hooks';import{POSTS}from'./Posts';import{GET_LATEST_POST_QUERY}from'./latestPost';import'./index.css';export var CREATE_POST_MUTATION=gql(_templateObject());export default function CreatePosts(){var input=useRef();var _useState=useState(''),_useState2=_slicedToArray(_useState,2),text=_useState2[0],setContent=_useState2[1];var _useMutation=useMutation(CREATE_POST_MUTATION,{awaitRefetchQueries:true,refetchQueries:[{query:POSTS},{query:GET_LATEST_POST_QUERY}]}),_useMutation2=_slicedToArray(_useMutation,2),createPost=_useMutation2[0],loading=_useMutation2[1].loading;if(loading){return/*#__PURE__*/React.createElement(\"div\",{className:\"loading\"},/*#__PURE__*/React.createElement(\"div\",{className:\"line\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"line\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"line\"}));}var typeAuto=function typeAuto(text,fieldId){var data=text.split('');var field=document.getElementById(fieldId);field.value='';(function autoTypeMe(){var letter=data.shift();field.value+=letter;if(data.length){setTimeout(autoTypeMe,20);}})();};var loginWithMockUser=function loginWithMockUser(){var username='mockuser@graminsta.com';var password='mockuser@graminsta';typeAuto(username,'username');typeAuto(password,'password');};var handleClickEvent=function handleClickEvent(){var content=input.current.value;createPost({variables:{content:content}});};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"input\",{id:\"button\",type:\"button\",onClick:handleClickEvent,value:\"Create\"}),/*#__PURE__*/React.createElement(\"input\",{id:\"button2\",type:\"button\",onClick:loginWithMockUser,value:\"Login with mock user\",style:{width:'500px',height:'50px','border-radius':'2px',border:'solid black 1px'}}));}","map":{"version":3,"sources":["/Users/sakibur/projects/Personal Projects/test/graminsta/src/createPosts.jsx"],"names":["gql","React","useRef","useState","useMutation","POSTS","GET_LATEST_POST_QUERY","CREATE_POST_MUTATION","CreatePosts","input","text","setContent","awaitRefetchQueries","refetchQueries","query","createPost","loading","typeAuto","fieldId","data","split","field","document","getElementById","value","autoTypeMe","letter","shift","length","setTimeout","loginWithMockUser","username","password","handleClickEvent","content","current","variables","width","height","border"],"mappings":"imBAAA,OAASA,GAAT,KAAoB,cAApB,CACA,MAAOC,CAAAA,KAAP,EAAgBC,MAAhB,CAAwBC,QAAxB,KAAwC,OAAxC,CACA,OAASC,WAAT,KAA4B,qBAA5B,CACA,OAASC,KAAT,KAAsB,SAAtB,CACA,OAASC,qBAAT,KAAsC,cAAtC,CACA,MAAO,aAAP,CAEA,MAAO,IAAMC,CAAAA,oBAAoB,CAAGP,GAAH,mBAA1B,CAQP,cAAe,SAASQ,CAAAA,WAAT,EAAuB,CACpC,GAAMC,CAAAA,KAAK,CAAGP,MAAM,EAApB,CADoC,cAETC,QAAQ,CAAC,EAAD,CAFC,wCAE7BO,IAF6B,eAEvBC,UAFuB,gCAGFP,WAAW,CAACG,oBAAD,CAAuB,CAClEK,mBAAmB,CAAE,IAD6C,CAElEC,cAAc,CAAE,CAAC,CACfC,KAAK,CAAET,KADQ,CAAD,CAEb,CACDS,KAAK,CAAER,qBADN,CAFa,CAFkD,CAAvB,CAHT,8CAG7BS,UAH6B,kBAGfC,OAHe,kBAGfA,OAHe,CAYpC,GAAIA,OAAJ,CAAa,CACX,mBACE,2BAAK,SAAS,CAAC,SAAf,eACE,2BAAK,SAAS,CAAC,MAAf,EADF,cAEE,2BAAK,SAAS,CAAC,MAAf,EAFF,cAGE,2BAAK,SAAS,CAAC,MAAf,EAHF,CADF,CAOD,CAED,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACP,IAAD,CAAOQ,OAAP,CAAmB,CAChC,GAAMC,CAAAA,IAAI,CAAGT,IAAI,CAACU,KAAL,CAAW,EAAX,CAAb,CACA,GAAMC,CAAAA,KAAK,CAAGC,QAAQ,CAACC,cAAT,CAAwBL,OAAxB,CAAd,CACAG,KAAK,CAACG,KAAN,CAAc,EAAd,CACC,SAASC,CAAAA,UAAT,EAAsB,CACnB,GAAIC,CAAAA,MAAM,CAAGP,IAAI,CAACQ,KAAL,EAAb,CACAN,KAAK,CAACG,KAAN,EAAeE,MAAf,CAEA,GAAIP,IAAI,CAACS,MAAT,CAAiB,CACbC,UAAU,CAACJ,UAAD,CAAa,EAAb,CAAV,CACH,CAEJ,CARA,GAAD,CASH,CAbD,CAeA,GAAMK,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC5B,GAAMC,CAAAA,QAAQ,CAAG,wBAAjB,CACA,GAAMC,CAAAA,QAAQ,CAAG,oBAAjB,CACAf,QAAQ,CAACc,QAAD,CAAW,UAAX,CAAR,CACAd,QAAQ,CAACe,QAAD,CAAW,UAAX,CAAR,CACH,CALD,CAOA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAM,CAC7B,GAAMC,CAAAA,OAAO,CAAGzB,KAAK,CAAC0B,OAAN,CAAcX,KAA9B,CACAT,UAAU,CAAC,CAAEqB,SAAS,CAAE,CAAEF,OAAO,CAAPA,OAAF,CAAb,CAAD,CAAV,CACD,CAHD,CAKA,mBACE,4CAeE,6BAAO,EAAE,CAAC,QAAV,CAAmB,IAAI,CAAC,QAAxB,CAAiC,OAAO,CAAED,gBAA1C,CAA4D,KAAK,CAAC,QAAlE,EAfF,cAgBE,6BAAO,EAAE,CAAC,SAAV,CAAoB,IAAI,CAAC,QAAzB,CAAkC,OAAO,CAAEH,iBAA3C,CAA8D,KAAK,CAAC,sBAApE,CAA2F,KAAK,CAAE,CAAEO,KAAK,CAAE,OAAT,CAAkBC,MAAM,CAAE,MAA1B,CAAkC,gBAAiB,KAAnD,CAA0DC,MAAM,CAAE,iBAAlE,CAAlG,EAhBF,CADF,CAoBD","sourcesContent":["import { gql } from 'apollo-boost';\nimport React, { useRef, useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { POSTS } from './Posts';\nimport { GET_LATEST_POST_QUERY } from './latestPost';\nimport './index.css';\n\nexport const CREATE_POST_MUTATION = gql`\nmutation CreatePost($content: String) {\n  createPost(content: $content) {\n    content,\n    date\n  }\n}`;\n\nexport default function CreatePosts() {\n  const input = useRef();\n  const [text, setContent] = useState('');\n  const [createPost, { loading }] = useMutation(CREATE_POST_MUTATION, {\n    awaitRefetchQueries: true,\n    refetchQueries: [{\n      query: POSTS,\n    }, {\n      query: GET_LATEST_POST_QUERY,\n    }],\n  });\n\n  if (loading) {\n    return (\n      <div className=\"loading\">\n        <div className=\"line\" />\n        <div className=\"line\" />\n        <div className=\"line\" />\n      </div>\n    );\n  }\n\n  const typeAuto = (text, fieldId) => {\n      const data = text.split('');\n      const field = document.getElementById(fieldId);\n      field.value = '';\n      (function autoTypeMe() {\n          var letter = data.shift();\n          field.value += letter;\n\n          if (data.length) {\n              setTimeout(autoTypeMe, 20);\n          }\n\n      }());\n  };\n\n  const loginWithMockUser = () => {\n      const username = 'mockuser@graminsta.com';\n      const password = 'mockuser@graminsta';\n      typeAuto(username, 'username');\n      typeAuto(password, 'password');\n  };\n\n  const handleClickEvent = () => {\n    const content = input.current.value;\n    createPost({ variables: { content } });\n  };\n\n  return (\n    <div>\n      {/*<textarea*/}\n      {/*  placeholder=\"Share whats on your mind.\"*/}\n      {/*  id=\"text\"*/}\n      {/*  name=\"text\"*/}\n      {/*  rows=\"4\"*/}\n      {/*  ref={input}*/}\n      {/*  style={{*/}\n      {/*    height: '300px',*/}\n      {/*    overflow: 'scroll',*/}\n      {/*    resize: 'none',*/}\n      {/*    wordWrap: 'break-word',*/}\n      {/*  }}*/}\n      {/*/>*/}\n      {/*<br />*/}\n      <input id=\"button\" type=\"button\" onClick={handleClickEvent} value=\"Create\" />\n      <input id=\"button2\" type=\"button\" onClick={loginWithMockUser} value=\"Login with mock user\" style={{ width: '500px', height: '50px', 'border-radius': '2px', border: 'solid black 1px'}}/>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}