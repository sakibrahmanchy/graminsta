{"ast":null,"code":"var _jsxFileName = \"/Users/sakibur/projects/Personal Projects/test/graminsta/src/createPosts.jsx\";\nimport { gql } from 'apollo-boost';\nimport React, { useRef, useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { POSTS } from './Posts';\nimport { GET_LATEST_POST_QUERY } from './latestPost';\nimport './index.css';\nexport const CREATE_POST_MUTATION = gql`\nmutation CreatePost($content: String) {\n  createPost(content: $content) {\n    content,\n    date\n  }\n}`;\nexport default function CreatePosts() {\n  const input = useRef();\n  const [text, setContent] = useState('');\n  const [createPost, {\n    loading\n  }] = useMutation(CREATE_POST_MUTATION, {\n    awaitRefetchQueries: true,\n    refetchQueries: [{\n      query: POSTS\n    }, {\n      query: GET_LATEST_POST_QUERY\n    }]\n  });\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"line\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"line\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"line\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  const typeAuto = (text, fieldId) => {\n    const data = text.split('');\n    const field = document.getElementById(fieldId);\n    field.value = '';\n\n    (function autoTypeMe() {\n      var letter = data.shift();\n      field.value += letter;\n\n      if (data.length) {\n        setTimeout(autoTypeMe, 20);\n      }\n    })();\n  };\n\n  const loginWithMockUser = () => {\n    const username = 'mockuser@graminsta.com';\n    const password = 'mockuser@graminsta';\n    typeAuto(username, 'username');\n    typeAuto(password, 'password');\n  };\n\n  const handleClickEvent = () => {\n    const content = input.current.value;\n    createPost({\n      variables: {\n        content\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: \"button\",\n    type: \"button\",\n    onClick: handleClickEvent,\n    value: \"Create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"button2\",\n    type: \"button\",\n    onClick: loginWithMockUser,\n    value: \"Login with mock user\",\n    style: {\n      width: '500px',\n      height: '50px',\n      'border-radius': '2px',\n      border: 'solid black 1px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/sakibur/projects/Personal Projects/test/graminsta/src/createPosts.jsx"],"names":["gql","React","useRef","useState","useMutation","POSTS","GET_LATEST_POST_QUERY","CREATE_POST_MUTATION","CreatePosts","input","text","setContent","createPost","loading","awaitRefetchQueries","refetchQueries","query","typeAuto","fieldId","data","split","field","document","getElementById","value","autoTypeMe","letter","shift","length","setTimeout","loginWithMockUser","username","password","handleClickEvent","content","current","variables","width","height","border"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\nimport React, { useRef, useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { POSTS } from './Posts';\nimport { GET_LATEST_POST_QUERY } from './latestPost';\nimport './index.css';\n\nexport const CREATE_POST_MUTATION = gql`\nmutation CreatePost($content: String) {\n  createPost(content: $content) {\n    content,\n    date\n  }\n}`;\n\nexport default function CreatePosts() {\n  const input = useRef();\n  const [text, setContent] = useState('');\n  const [createPost, { loading }] = useMutation(CREATE_POST_MUTATION, {\n    awaitRefetchQueries: true,\n    refetchQueries: [{\n      query: POSTS,\n    }, {\n      query: GET_LATEST_POST_QUERY,\n    }],\n  });\n\n  if (loading) {\n    return (\n      <div className=\"loading\">\n        <div className=\"line\" />\n        <div className=\"line\" />\n        <div className=\"line\" />\n      </div>\n    );\n  }\n\n  const typeAuto = (text, fieldId) => {\n      const data = text.split('');\n      const field = document.getElementById(fieldId);\n      field.value = '';\n      (function autoTypeMe() {\n          var letter = data.shift();\n          field.value += letter;\n\n          if (data.length) {\n              setTimeout(autoTypeMe, 20);\n          }\n\n      }());\n  };\n\n  const loginWithMockUser = () => {\n      const username = 'mockuser@graminsta.com';\n      const password = 'mockuser@graminsta';\n      typeAuto(username, 'username');\n      typeAuto(password, 'password');\n  };\n\n  const handleClickEvent = () => {\n    const content = input.current.value;\n    createPost({ variables: { content } });\n  };\n\n  return (\n    <div>\n      {/*<textarea*/}\n      {/*  placeholder=\"Share whats on your mind.\"*/}\n      {/*  id=\"text\"*/}\n      {/*  name=\"text\"*/}\n      {/*  rows=\"4\"*/}\n      {/*  ref={input}*/}\n      {/*  style={{*/}\n      {/*    height: '300px',*/}\n      {/*    overflow: 'scroll',*/}\n      {/*    resize: 'none',*/}\n      {/*    wordWrap: 'break-word',*/}\n      {/*  }}*/}\n      {/*/>*/}\n      {/*<br />*/}\n      <input id=\"button\" type=\"button\" onClick={handleClickEvent} value=\"Create\" />\n      <input id=\"button2\" type=\"button\" onClick={loginWithMockUser} value=\"Login with mock user\" style={{ width: '500px', height: '50px', 'border-radius': '2px', border: 'solid black 1px'}}/>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}