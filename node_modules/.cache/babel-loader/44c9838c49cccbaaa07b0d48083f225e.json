{"ast":null,"code":"var _jsxFileName = \"/Users/sakibur/projects/Personal Projects/test/graminsta/src/Profile.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport Grid from '@material-ui/core/Grid';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport ChatBubbleIcon from '@material-ui/icons/ChatBubble';\nimport Favorite from '@material-ui/icons/Favorite';\nimport { getCookie } from './cookies';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    flexDirection: 'column',\n    backgroundColor: theme.palette.background.paper\n  },\n  user: {\n    flexGrow: 1,\n    marginTop: '5%'\n  },\n  list: {\n    flexGrow: 1,\n    padding: theme.spacing(2),\n    margin: 'auto'\n  },\n  paper: {\n    padding: theme.spacing(2),\n    margin: 'auto',\n    maxWidth: 500\n  },\n  image: {\n    width: 128,\n    height: 128\n  },\n  img: {\n    margin: 'auto',\n    display: 'block',\n    maxWidth: '100%',\n    maxHeight: '100%'\n  },\n  large: {\n    width: theme.spacing(15),\n    height: theme.spacing(15)\n  }\n}));\nexport default function Profile({\n  match: {\n    params: {\n      id: userId = 0\n    } = {}\n  } = {}\n}) {\n  const classes = useStyles();\n  const [data, setData] = useState([]);\n  const [isBusy, setBusy] = useState(true);\n  const [postCount, setPostCount] = useState(0);\n  const [skip, setSkip] = useState(0);\n  const [hasMoreItems, setHasMoreItems] = useState(true);\n\n  async function fetchData() {\n    const url = `http://localhost:8078/posts?user_id=${userId}`;\n    fetch(url, {\n      method: 'get',\n      headers: new Headers({\n        'Authorization': `Basic ${getCookie('token')}`,\n        'Content-Type': 'application/json'\n      })\n    }).then(res => res.json()).then(response => {\n      setBusy(false);\n\n      if (response.posts) {\n        const posts = response.posts;\n        setData([...data, ...posts]);\n        setSkip(skip + posts.length);\n      }\n\n      if (response.count) {\n        setPostCount(response.count);\n\n        if (skip >= response.count) {\n          setHasMoreItems(false);\n        }\n      }\n    }).catch(() => {\n      setBusy(false);\n      setData(null);\n    });\n  }\n\n  useEffect(() => {\n    setBusy(true);\n    fetchData();\n  }, []);\n  const dataAvailable = !isBusy && data && data[0];\n\n  const getItems = () => {\n    if (!data) {\n      return null;\n    }\n\n    return data.map(({\n      photos,\n      content,\n      user: {\n        name\n      }\n    }, index) => {\n      const [{\n        thumbUrl\n      }] = photos;\n      return /*#__PURE__*/React.createElement(GridListTile, {\n        key: `${thumbUrl}${index}`,\n        className: \"imgContainer\",\n        cols: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"image\",\n        src: thumbUrl,\n        alt: content,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"img-overlay\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        direction: \"row\",\n        spacing: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Favorite, {\n        style: {\n          marginTop: '2px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 29\n        }\n      }), \" 13\"), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(ChatBubbleIcon, {\n        style: {\n          marginTop: '2px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 29\n        }\n      }), \" 24\"))));\n    });\n  };\n\n  const items = dataAvailable && /*#__PURE__*/React.createElement(GridList, {\n    cellHeight: 293,\n    className: \"gridList\",\n    cols: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, getItems());\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    position: \"fixed\",\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"curl-fonts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 25\n    }\n  }, \"GramInsta\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(ButtonBase, {\n    className: classes.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 29\n    }\n  }, dataAvailable ? /*#__PURE__*/React.createElement(Avatar, {\n    \"aria-label\": \"recipe\",\n    className: classes.large,\n    src: data[0].user.imageUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 33\n    }\n  }) : /*#__PURE__*/React.createElement(Skeleton, {\n    animation: \"wave\",\n    variant: \"circle\",\n    width: 40,\n    height: 40,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: true,\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    container: true,\n    direction: \"column\",\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 33\n    }\n  }, dataAvailable ? /*#__PURE__*/React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"h3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 41\n    }\n  }, data[0].user.name) : /*#__PURE__*/React.createElement(Skeleton, {\n    animation: \"wave\",\n    variant: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 36\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 40\n    }\n  }, dataAvailable ? /*#__PURE__*/React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"body1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 48\n    }\n  }, /*#__PURE__*/React.createElement(PostAddIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 52\n    }\n  }), \" \", postCount, \" Posts\") : /*#__PURE__*/React.createElement(Skeleton, {\n    animation: \"wave\",\n    variant: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 48\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 40\n    }\n  }, dataAvailable ? /*#__PURE__*/React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"body1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 48\n    }\n  }, /*#__PURE__*/React.createElement(ChatBubbleIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 52\n    }\n  }), \" \", postCount, \" Comments\") : /*#__PURE__*/React.createElement(Skeleton, {\n    animation: \"wave\",\n    variant: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 48\n    }\n  }))))))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.list,\n    style: {\n      marginTop: '5%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  }, isBusy && /*#__PURE__*/React.createElement(LinearProgress, {\n    color: \"secondary\",\n    style: {\n      marginTop: '3%',\n      height: '2rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 28\n    }\n  }), /*#__PURE__*/React.createElement(InfiniteScroll, {\n    pageStart: 0,\n    loadMore: fetchData,\n    hasMore: hasMoreItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 17\n    }\n  }, items)));\n}","map":{"version":3,"sources":["/Users/sakibur/projects/Personal Projects/test/graminsta/src/Profile.jsx"],"names":["React","useState","useEffect","makeStyles","AppBar","Toolbar","Typography","GridList","GridListTile","Grid","ButtonBase","PostAddIcon","ChatBubbleIcon","Favorite","getCookie","LinearProgress","Avatar","Skeleton","InfiniteScroll","useStyles","theme","root","display","flexWrap","justifyContent","overflow","flexDirection","backgroundColor","palette","background","paper","user","flexGrow","marginTop","list","padding","spacing","margin","maxWidth","image","width","height","img","maxHeight","large","Profile","match","params","id","userId","classes","data","setData","isBusy","setBusy","postCount","setPostCount","skip","setSkip","hasMoreItems","setHasMoreItems","fetchData","url","fetch","method","headers","Headers","then","res","json","response","posts","length","count","catch","dataAvailable","getItems","map","photos","content","name","index","thumbUrl","alignItems","items","imageUrl"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport Grid from '@material-ui/core/Grid';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport ChatBubbleIcon from '@material-ui/icons/ChatBubble';\nimport Favorite from '@material-ui/icons/Favorite';\nimport { getCookie } from './cookies'\n\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        overflow: 'hidden',\n        flexDirection: 'column',\n        backgroundColor: theme.palette.background.paper,\n    },\n    user: {\n        flexGrow: 1,\n        marginTop: '5%',\n    },\n    list: {\n        flexGrow: 1,\n        padding: theme.spacing(2),\n        margin: 'auto',\n    },\n    paper: {\n        padding: theme.spacing(2),\n        margin: 'auto',\n        maxWidth: 500,\n    },\n    image: {\n        width: 128,\n        height: 128,\n    },\n    img: {\n        margin: 'auto',\n        display: 'block',\n        maxWidth: '100%',\n        maxHeight: '100%',\n    },\n    large: {\n        width: theme.spacing(15),\n        height: theme.spacing(15),\n    },\n}));\n\nexport default function Profile({ match: { params: { id: userId = 0 } = {} } = {}}) {\n    const classes = useStyles();\n    const [data, setData] = useState([]);\n    const [isBusy, setBusy] = useState(true);\n    const [postCount, setPostCount] = useState(0);\n    const [skip, setSkip] = useState(0);\n    const [hasMoreItems, setHasMoreItems] = useState(true);\n\n    async function fetchData() {\n        const url = `http://localhost:8078/posts?user_id=${userId}`;\n\n        fetch(url, {\n            method: 'get',\n            headers: new Headers({\n                'Authorization': `Basic ${getCookie('token')}`,\n                'Content-Type': 'application/json'\n            }),\n        }).then(res => res.json()).then((response) => {\n            setBusy(false);\n            if (response.posts) {\n                const posts = response.posts;\n                setData([ ...data, ...posts ]);\n                setSkip(skip + posts.length);\n            }\n\n            if (response.count) {\n                setPostCount(response.count);\n                if (skip >= response.count) {\n                    setHasMoreItems(false);\n                }\n            }\n        }).catch(() => {\n            setBusy(false);\n            setData(null);\n        });\n    }\n\n    useEffect(() => {\n        setBusy(true);\n\n        fetchData();\n    }, []);\n\n    const dataAvailable = !isBusy && data && data[0];\n\n    const getItems = () => {\n        if (!data) {\n            return null;\n        }\n        return data.map(({ photos, content, user: { name }}, index ) => {\n            const [{ thumbUrl }] = photos;\n            return (\n            <GridListTile key={`${thumbUrl}${index}`} className=\"imgContainer\" cols={2}>\n                <img className=\"image\" src={thumbUrl} alt={content} />\n                <div className=\"img-overlay\">\n                    <Grid container direction=\"row\" spacing={4}>\n                        <Grid item xs style={{\n                            display: 'flex',\n                            alignItems: 'center'\n                        }}>\n                            <Favorite style={{ marginTop: '2px'}}/> 13\n                        </Grid>\n\n                        <Grid item xs style={{\n                            display: 'flex',\n                            alignItems: 'center'\n                        }}>\n                            <ChatBubbleIcon style={{ marginTop: '2px'}}/> 24\n                        </Grid>\n                    </Grid>\n                </div>\n            </GridListTile>\n        )});\n    };\n\n    const items = dataAvailable && (\n        <GridList cellHeight={293} className=\"gridList\" cols={4}>\n            {getItems()}\n        </GridList>\n    );\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"fixed\" color=\"white\">\n                <Toolbar>\n                    <Typography variant=\"h4\">\n                        <span className=\"curl-fonts\">GramInsta</span>\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <div className={classes.user}>\n                <div className={classes.paper}>\n                    <Grid container spacing={6}>\n                        <Grid item>\n                            <ButtonBase className={classes.image}>\n                                {dataAvailable ? (\n                                <Avatar aria-label=\"recipe\" className={classes.large} src={data[0].user.imageUrl}/> ) : (\n                                    <Skeleton animation=\"wave\" variant=\"circle\" width={40} height={40} />\n                                    )\n                                }\n                            </ButtonBase>\n                        </Grid>\n                        <Grid item xs={12} md container>\n                            <Grid item xs container direction=\"column\" spacing={4}>\n                                <Grid item xs>\n                                    {dataAvailable ? (\n                                        <Typography gutterBottom variant=\"h3\">\n                                            {data[0].user.name}\n                                        </Typography>): (\n                                        <Skeleton animation=\"wave\" variant=\"text\"/>\n                                        )\n                                    }\n                                   <Grid item xs container direction=\"row\" spacing={2}>\n                                       <Grid item xs>\n                                           {dataAvailable ? (\n                                               <Typography gutterBottom variant=\"body1\">\n                                                   <PostAddIcon /> {postCount} Posts\n                                               </Typography>): (\n                                               <Skeleton animation=\"wave\" variant=\"text\"/>\n                                           )\n                                           }\n                                       </Grid>\n                                       <Grid item xs>\n                                           {dataAvailable ? (\n                                               <Typography gutterBottom variant=\"body1\">\n                                                   <ChatBubbleIcon /> {postCount} Comments\n                                               </Typography>): (\n                                               <Skeleton animation=\"wave\" variant=\"text\"/>\n                                           )\n                                           }\n                                       </Grid>\n                                   </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </div>\n            </div>\n            <div className={classes.list}  style={{ marginTop: '5%' }}>\n                {isBusy && <LinearProgress color=\"secondary\" style={{ marginTop: '3%', height: '2rem' }}/>}\n                <InfiniteScroll\n                    pageStart={0}\n                    loadMore={fetchData}\n                    hasMore={hasMoreItems}>\n                    {items}\n                </InfiniteScroll>\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}